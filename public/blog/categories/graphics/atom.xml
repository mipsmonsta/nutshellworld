<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Graphics | Nutshell World]]></title>
  <link href="http://nutshellworld.herokuapp.com/blog/categories/graphics/atom.xml" rel="self"/>
  <link href="http://nutshellworld.herokuapp.com/"/>
  <updated>2013-09-06T16:01:03+08:00</updated>
  <id>http://nutshellworld.herokuapp.com/</id>
  <author>
    <name><![CDATA[TYJ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drawing a point in an ImageView]]></title>
    <link href="http://nutshellworld.herokuapp.com/blog/2013/09/06/drawing-a-point-in-an-imageview/"/>
    <updated>2013-09-06T15:35:00+08:00</updated>
    <id>http://nutshellworld.herokuapp.com/blog/2013/09/06/drawing-a-point-in-an-imageview</id>
    <content type="html"><![CDATA[<p>Suppose you have an image that is of size 50 px by 50 px. This image will be presented in an
imageview. Now if you wanted to draw a point at exactly (30 px, 30 px) in the image coordinate space,
how would you go about it in Android.</p>

<p>First of all, let&rsquo;s talk about challenges posed by the Android framework. The size of the imageview
may not be the same size and/or aspect as the image. Also, pre-scaling of the bitmap may be done since the
density of the screen may be higher than what was assumed for the bitmap image. <strong>Headache</strong> is all.</p>

<p>My solution:</p>

<blockquote><p>In onDraw() method in a subclassed ImageView</p></blockquote>

<pre><code>Matrix mat = getImageMatrix();

float[] pts = {30, 30}; //in {x0, y0, x1, y1,...} format

mat.mapPts(pts);

float mappedX = pts[0];
float mappedY = pts[1];
</code></pre>

<p>Now <em>mappedX</em> and <em>mappedY</em> will be the new coordinates for (30px, 30px) in the <em>new</em> image coordinate space.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image DPI and Android]]></title>
    <link href="http://nutshellworld.herokuapp.com/blog/2013/09/02/image-dpi-and-android/"/>
    <updated>2013-09-02T10:22:00+08:00</updated>
    <id>http://nutshellworld.herokuapp.com/blog/2013/09/02/image-dpi-and-android</id>
    <content type="html"><![CDATA[<p>Android developer documents states that the baseline screen density is taken to be 160 pixels (px) per
inch. If your device has 240 px per inch (high density), a image of size 100px by 100px will appear larger on the baseline
baseline screen than the high density screen. Specially, the image will be 0.625 of an inch on baseline screen compared to
0.416 inch on the higher density screen.</p>

<p>Then how does <em>image dpi</em> relates to how Android serves up the image. The answer as I have researched is <strong>NOTHING</strong>.
Turns out the image dpi has no bearing on how large the images are displayed on the computer or cellphone screen.
It does however specify how large these images are printed on paper. For example, two images of 100px by 100px but at different
dpi of 200 dpi and 100 dpi will look the same size on the same cellphone screen. However, when printed,
the one with the higher dpi will print as half the dimension as the other.</p>

<p>You can refer to this <a href="http://www.scantips.com/no72dpi.html">scantips</a> for more on image dpi.</p>

<p>For us Android developers, we just have to stop worrying about image dpi. If only we
can do the same for screen density&hellip;lol.</p>
]]></content>
  </entry>
  
</feed>
